import { Injectable } from '@angular/core';
import * as PaillierCryptoUtils from 'paillier-bigint';

@Injectable()
export class PaillierService {

    private paillierCryptoUtils: PaillierCryptoUtils;

    privateKey: any;
    publicKey: any;
    /*
    DADO UNOS PARAMETROS CONOCIDOS QUE ME PROPORCIONARA LA MESA...
    ELIMINAR g & n una vez tengamos esto de la mesa
    */
     g = "23933266222918198012099736303771845020371980032508409841963386893928096382279866948483809259535033327680229949826234322197320291686004525622881929619851879699028650196306350111813071244693666760732390257560247074145892082540870394368977048196340343430822756261548601410666476837108837272089296998587110265699994507840693520949654827510521842416398211698505924140068004398371992876656078232523899604039709662444875765800604383866726351915886278234473122599984104271066684209953878634335348961299844984734420590470330606749566807417072625886406637283483751977609237643751373752340996182092032526409860387582432055915803896007919538561209762710097980749814551659769128446003634396809908522441854120287269144679088355024374624134536695578557780387553319486137931096435212838217233369993252543548527590127554698890592474417748502312881320004207691367463988581358953997734475682636905766640725846133648897405205992431205465764508564928035439514739635368353669089033516606044315412833038581083983472948863767891886622763068494419880917925479984397518352925245385427175741752132217419452992342445241859170830074144532800765700943581946742785524820055592861719977701607038270021953230468436170160960954888798763166063539126405409422142676640996725266080100670827783553593537560673750493779137523907428740335475249193731300808938908588376974892166770325317579211534864204924576178532242093046289414821647312641670980856450700041942517258375940320217136287153829257178480968531353322407097632127272936794984636011884472591358805089804270440673887220109405695519707669766498953071397723517349278850076861466820073617854834145261149321799092335406952407311146379513965559140996247957854946877042257084652995260414403035355580926905329826927822742449069121060399709608737094132173841269306965473716370129377019365003132764599355231923276460748738097748533832878916";
     n = "4897497041836230490133909240429702470382518188227255907582880508340987232980726985260438506148941017268314146918001558223082679451515147963907827561316092140881307677837705720385056500551389363562467605719471834252998530902343647085269661320185842541357158334429633400076071037685310092735382262015544926150116345685815581923085402582005085744028657737455777903768287872427130342353692921272889001162220081746138281780464423048439687118490944336834109899257697179315448252392518375980761033244187547621450060942992237177144541596116266871384671414411907832292333808409222601656658735660117696037835044145411143671558069544065555973710857437289553779614966002290663533535634372766304236322946132498556185141485006526646344638217620376226066033393113405309833396404564863128122316735312085486355472698872072905155376552551855127074026093513076052352488826936198739116106933577548569706005633757058157798076411837172240141423937";

    constructor() {
        this.paillierCryptoUtils = PaillierCryptoUtils;
        this.generateKeys(this.n, this.g);
    }

    sign(m) {
        return this.encrypt(m);
    };

    verify(k) {
        return this.decrypt(k);
    };

    encrypt(m) {
        return this.publicKey.encrypt(m);
    };

    decrypt(k) {
        return this.privateKey.decrypt(k)
    };

    blind(m) {
        //TODO?
    }

    unblind(s) {
        //TODO?
    }


    private generateKeys(n, g) {
        
        this.publicKey = new this.paillierCryptoUtils.PublicKey(n, g)
        //this.privateKey = ??
    };


    /*
    private async generateKeys(n, g) {
        var paillierResponse = await this.paillierCryptoUtils.generateRandomKeys(3072);
        this.publicKey = new this.paillierCryptoUtils.PaillierPublicKey(n, g)
        this.privateKey = paillierResponse['privateKey'];
    };
    */
}

